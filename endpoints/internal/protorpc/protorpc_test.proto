// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package protorpc;

// Message used to nest inside another message.
message NestedMessage {
  required string a_value = 1;
}

// Message that contains nested messages.
message HasNestedMessage {
  optional NestedMessage nested = 1;
  repeated NestedMessage repeated_nested = 2;
}

message HasDefault {
  optional string a_value = 1 [default="a default"];
}

// Message that contains all variants as optional fields.
message OptionalMessage {
  enum SimpleEnum {
    VAL1 = 1;
    VAL2 = 2;
  }

  optional double double_value = 1;
  optional float float_value = 2;
  optional int64 int64_value = 3;
  optional uint64 uint64_value = 4;
  optional int32 int32_value = 5;
  optional bool bool_value = 6;
  optional string string_value = 7;
  optional bytes bytes_value = 8;
  optional SimpleEnum enum_value = 10;

  // TODO(rafek): Add support for these variants.
  // optional uint32 uint32_value = 9;
  // optional sint32 sint32_value = 11;
  // optional sint64 sint64_value = 12;
}

// Message that contains all variants as repeated fields.
message RepeatedMessage {
  enum SimpleEnum {
    VAL1 = 1;
    VAL2 = 2;
  }

  repeated double double_value = 1;
  repeated float float_value = 2;
  repeated int64 int64_value = 3;
  repeated uint64 uint64_value = 4;
  repeated int32 int32_value = 5;
  repeated bool bool_value = 6;
  repeated string string_value = 7;
  repeated bytes bytes_value = 8;
  repeated SimpleEnum enum_value = 10;

  // TODO(rafek): Add support for these variants.
  // repeated uint32 uint32_value = 9;
  // repeated sint32 sint32_value = 11;
  // repeated sint64 sint64_value = 12;
}

// Message that has nested message with all optional fields.
message HasOptionalNestedMessage {
  optional OptionalMessage nested = 1;
  repeated OptionalMessage repeated_nested = 2;
}
